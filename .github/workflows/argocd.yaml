name: deployment-kubernetes
run-name: Deployment resources in Kubernetes CI

on:
  workflow_call:
    secrets:
      DNS_TOKEN:
        required: true
    inputs:
      kube-config:
        required: true
        type: string
      environment:
        required: true
        type: string
      cloudflare_dns_token:  
        required: true
        type: string
      action:  
        required: true
        type: string
      first_deployment:  
        required: false
        type: boolean
        default: false

env:
  kube_production: kttps://production-kubernetes.default.svc:443
  kube_development: kttps://development-kubernetes.default.svc:443
  ARGOCD_RELEASE_NAME: argocd
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  CLOUDFLARE_DNS_TOKEN: ${{ secrets.CLOUDFLARE_DNS_TOKEN }}
  CLOUDFLARE_ACCOUNT: ${{ secrets.CLOUDFLARE_ACCOUNT }}

jobs:
  deployment:
    runs-on: 'ubuntu-latest'
    outputs:
      kube_config: ${{ inputs.kube-config }}
      action: ${{ inputs.action }}
    name: Deployment by GitOps
    if: inputs.first_deployment
    permissions: 
      contents: read
    steps:
    - uses: actions/checkout@v1
    
    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: v3.13.0
        kubeconfig: ${{ inputs.kube-config }}
      env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
              
    - name: Run chart-releaser
      uses: helm/chart-releaser-action@v1.6.0
      with:
        kubeconfig: ${{ inputs.kube-config }}
      env:
          CR_TOKEN: "${{ github.token }}"
          
    - name: Action status
      run: echo ${{ inputs.kube-config }}
              
    - name: Add dependency chart repos    
      run: |
        helm repo add argoproj https://argoproj.github.io/argo-helm

    - name: Search argocd chart
      run: |
          helm search repo argoproj

    - name: Kubeconfig
      run: |
        mkdir -p ~/.kube
        echo ${{ inputs.kube-config }}|base64 -d > ~/.kube/config

    - name: Install argocd chart
      if: ${{ inputs.action }} == 'apply'
      run: |
          COUNT=$(helm list -A --filter ${{ env.ARGOCD_RELEASE_NAME }}|grep -v  UPDATED |wc -l |sed 's/ //g')
          if [ $COUNT == 0 ];then
            echo "Release ${{ env.ARGOCD_RELEASE_NAME }} não encontrada. Instalando..."
            echo "helm install ${{ env.ARGOCD_RELEASE_NAME }} argoproj/argo-cd --values ./deployment/helm/argoproj/argocd/values.yaml  --create-namespace --namespace argoproj"
            helm install ${{ env.ARGOCD_RELEASE_NAME }} argoproj/argo-cd --values ./deployment/helm/argoproj/argocd/values.yaml   --create-namespace --namespace argoproj
          fi
         
    - name: install projects
      run: kubectl apply -R -f ./deployment/gitops/project


    # - name: install ingress
    #   run: kubectl apply -f ./deployment/gitops/ingress/controller.yaml
      
    # - name: install prometheus
    #   run: kubectl apply -f ./deployment/gitops/monitoring/prometheus.yaml

    # - name: install grafana
    #   run: kubectl apply -f ./deployment/gitops/monitoring/grafana.yaml

    - name: replace secrets
      run: |
        sed -i 's/__CF_TOKEN__/${{ secrets.DNS_TOKEN }}/g' ./deployment/gitops/vault/external-dns.yaml

    # - name: check deployment file
    #   run: |
    #     cat ./deployment/gitops/vault/external-dns.yaml
  

    - name: install external secrets
      run: kubectl apply -f ./deployment/gitops/vault/external-secrets.yaml

    - name: wait external secret is running
      run: sleep 60

    - name: install vault
      run: kubectl apply -f ./deployment/gitops/vault/vault.yaml

    - name: wait vault is running
      run: |
            count=5
            increment=5
            pesos=(5 6 7 8 9)
            ponderado=0
    
            while true;do
              OK=$(kubectl -n vault get pods hashicorp-vault-0 --ignore-not-found=true|wc -l|sed 's/ //g')
              echo "ok é: $OK"
    
              if [[ $OK -gt 0 ]]; then
                result=$((count + increment + ponderado))
                echo "ponderado is: $result"
                sleep $result
                break
              fi
    
              ponderado=$((ponderado + count * pesos[count % ${#pesos[@]}]))
              echo "ponderado is: $ponderado"
    
              count=$((count + increment))
              sleep $ponderado
            done

    - name: wait secret store is running
      run: |
                  count=5
                  increment=5
                  pesos=(5 6 7 8 9)
                  ponderado=0
          
                  while true;do
                    OK=$(kubectl api-resources |grep -w SecretStore |wc -l|sed 's/ //g')
                    echo "ok é: $OK"
          
                    if [[ $OK -gt 0 ]]; then
                      result=$((count + increment + ponderado))
                      echo "ponderado is: $result"
                      sleep $result
                      break
                    fi
          
                    ponderado=$((ponderado + count * pesos[count % ${#pesos[@]}]))
                    echo "ponderado is: $ponderado"
          
                    count=$((count + increment))
                    sleep $ponderado
                  done
            
    - name: install vault secrets
      run: kubectl apply -f ./deployment/gitops/vault/vault-secret.yaml

    - name: install es secret
      run: kubectl apply -f ./deployment/gitops/vault/es-secret.yaml

    - name: install crb
      run: kubectl apply -f ./deployment/gitops/vault/vault-crb.yaml

    - name: install tools to link vault with es
      run: kubectl apply -R -f ./deployment/gitops/vault

    - name: Remove kubeconfig
      run: |
            rm -rf ~/.kube

  call_install_vault:
    name: Implement Hashicorp Vault
    uses: ./.github/workflows/vault.yaml 
    needs: deployment
    permissions:
      contents: read
    if: (needs.deployment.result == 'skipped' || needs.deployment.result == 'success') && inputs.action == 'apply'
    with:
      kube_config: ${{ inputs.kube-config }}
      action: ${{ inputs.action }}


