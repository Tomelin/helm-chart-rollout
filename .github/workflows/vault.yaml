name: hashicorp-vault
run-name: Implement Hashicorp vault

on:
  workflow_call:
    inputs:
      kube_config:
        required: true
        type: string
      action:   
        required: true
        type: string
env:
  kube_production: kttps://production-kubernetes.default.svc:443
  kube_development: kttps://development-kubernetes.default.svc:443
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  CLOUDFLARE_DNS_TOKEN: ${{ secrets.CLOUDFLARE_DNS_TOKEN }}
  CLOUDFLARE_ACCOUNT: ${{ secrets.CLOUDFLARE_ACCOUNT }}

jobs:
  vault:
    if: ${{ inputs.action }} == 'destroy'
    runs-on: 'ubuntu-latest'
    outputs:
      vault_root_token: ${{ steps.unseal.outputs.root_token }}
      action: ${{ inputs.action }}
    name: Enable Hashicorp vault
    permissions: 
      contents: read
    steps:
    - uses: actions/checkout@v1
    
    - name: Kubeconfig
      run: |
        mkdir -p ~/.kube
        echo ${{ inputs.kube_config }}|base64 -d > ~/.kube/config
    
    - name: unseal vault
      id: unseal
      run: |
            kubectl -n vault exec hashicorp-vault-0 -- vault operator init > ~/.kube/vault
            cat ~/.kube/vault
            KEY1=$(cat ~/.kube/vault |sed -n 1p | awk -F ': ' '{ print $2 }')
            echo $KEY1
            KEY2=$(cat ~/.kube/vault |sed -n 2p | awk -F ': ' '{ print $2 }')
            echo $KEY2
            KEY3=$(cat ~/.kube/vault |sed -n 3p | awk -F ': ' '{ print $2 }')
            echo $KEY3
            KEY4=$(cat ~/.kube/vault |sed -n 4p | awk -F ': ' '{ print $2 }')
            echo $KEY4
            KEY5=$(cat ~/.kube/vault |sed -n 5p | awk -F ': ' '{ print $2 }')
            echo $KEY5
            ROOT=$(cat ~/.kube/vault |grep '^Initial'| awk -F ': ' '{ print $2 }')
            echo $ROOT
            echo "root_token=$(echo $ROOT)" >> $GITHUB_OUTPUT
    
            kubectl -n vault exec hashicorp-vault-0 -- vault operator unseal $KEY1
            kubectl -n vault exec hashicorp-vault-0 -- vault operator unseal $KEY2
            kubectl -n vault exec hashicorp-vault-0 -- vault operator unseal $KEY3
            kubectl -n vault exec hashicorp-vault-0 -- vault operator unseal $KEY4
            kubectl -n vault exec hashicorp-vault-0 -- vault operator unseal $KEY5
    
            kubectl -n vault exec hashicorp-vault-0 -- vault login token=$ROOT

    - name: vault login
      run: |
        kubectl -n vault exec hashicorp-vault-0 -- vault login token=${{ steps.unseal.outputs.root_token }}
        # kubectl -n vault exec hashicorp-vault-0 -- vault login token=${{ vars.VAULT_TOKEN }}

    - name: vault enable kv in platform path
      run: |
        kubectl -n vault exec hashicorp-vault-0 -- vault secrets enable -version=2 -path=platform kv

    - name: vault enable kv
      run: |
        kubectl exec hashicorp-vault-0  -n vault -- vault secrets enable -version=2 kv
        
    - name: vault enable kubernetes
      run: |
          kubectl -n vault exec hashicorp-vault-0 -- vault auth enable kubernetes

    - name: vault copy policies
      run: |
          kubectl -n vault cp ./deployment/gitops/vault/policies/user.hcl hashicorp-vault-0:/tmp/user.hcl
          kubectl -n vault cp ./deployment/gitops/vault/policies/k8s.hcl hashicorp-vault-0:/tmp/k8s.hcl
          kubectl -n vault cp ./deployment/gitops/vault/policies/external-secret.hcl hashicorp-vault-0:/tmp/external-secret.hcl

    - name: vault create user policy
      run: |
        kubectl -n vault exec hashicorp-vault-0 --  vault policy write platform-user /tmp/user.hcl

    - name: vault create k8s policy
      run: |
          kubectl -n vault exec hashicorp-vault-0 --  vault policy write platform-k8s /tmp/k8s.hcl

    # - name: vault create external secret policy
    #   run: |
    #     kubectl -n vault exec hashicorp-vault-0 --  vault policy write platform-k8s /tmp/external-secret.hcl
    
    - name: vault create token for user
      run: |
          kubectl -n vault exec -ti hashicorp-vault-0 -- vault token create -policy=platform-user -display-name=platform-user
              
    - name: vault create token for k8s
      run: |
          kubectl -n vault exec -ti hashicorp-vault-0 -- vault token create -policy=platform-k8s -display-name=platform-k8s                  
    
    - name: vault status
      run: |
        kubectl -n vault exec hashicorp-vault-0 -- vault status

    - name: list policy 
      run: |
        kubectl -n vault exec hashicorp-vault-0 -- vault policy list

    - name: vault put secret kv
      run: |
        kubectl -n vault exec hashicorp-vault-0 -- vault kv put platform/gitops user=teste

    - name: Remove kubeconfig
      run: |
          rm -rf ~/.kube

  call_install_external_secret:
    name: Link hashicopr Vault and External Secret
    uses: ./.github/workflows/es-vault.yaml 
    needs: vault
    permissions:
      contents: read
    if: ${{ needs.vault.result }} == 'success'
    with:
      kube_config: ${{ inputs.kube_config }}
      vault_root_token:  ${{ needs.vault.outputs.vault_root_token }}
        
